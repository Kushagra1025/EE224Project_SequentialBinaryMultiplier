library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity multiplier_4bit_datapath is
    port (
        clk          : in std_logic;
        reset        : in std_logic;
        load         : in std_logic;
        shift        : in std_logic;
        add_en       : in std_logic;
        multiplicand : in std_logic_vector(3 downto 0); -- 4-bit multiplicand
        multiplier   : in std_logic_vector(3 downto 0); -- 4-bit multiplier
        product      : out std_logic_vector(7 downto 0) -- 8-bit product
    );
end entity;

architecture Behavioral of multiplier_4bit_datapath is
    signal A, P : std_logic_vector(7 downto 0); -- Registers for the multiplicand and product
    signal B    : std_logic_vector(3 downto 0); -- Multiplier register
begin
    process (clk, reset)
    begin
        if reset = '1' then
            A <= (others => '0');
            B <= (others => '0');
            P <= (others => '0');
        elsif rising_edge(clk) then
            if load = '1' then
                A <= std_logic_vector(resize(unsigned(multiplicand), 8)); -- Load multiplicand into upper 4 bits of A
                B <= multiplier;  -- Load 4-bit multiplier
                P <= (others => '0'); -- Initialize product to zero
            elsif shift = '1' then
                P <= std_logic_vector(shift_right(unsigned(P), 1)); -- Shift product right
                B <= std_logic_vector(shift_right(unsigned(B), 1)); -- Shift multiplier right
            end if;
            
            if add_en = '1' then
                P(7 downto 4) <= std_logic_vector(unsigned(P(7 downto 4)) + unsigned(A(7 downto 4))); -- Add A to P
            end if;
        end if;
    end process;
    
    product <= P; -- Output the product
end Behavioral;
